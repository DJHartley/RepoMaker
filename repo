# ! bin/bash
# RepoMaker
# Version 1.9.1
# Please Read README and CHANGELOG for more info...
#
#

VERSION="1.9.3"

# Triggers for repos... give them names or what ever u like to... thats what u call to execute RepoMaker on THAT repo
# repo -update 3 will update Repo 3
# repo -update (without giving a Repo Choice) will ALWAYS update Repo 1 so Repo one should ALWAYS be your Primary Repo ;)

REPO1="1" # may call it official (repo -update official OR repo -update) 
REPO2="2" # may call it beta (repo -update beta) 
REPO3="3" 
REPO4="4" 
REPO5="5"

##############################################
# 											 #
# Define Config files for Multi Repo Support #
#											 #
##############################################

if [ "$2" == "$REPO1" ] || [ "$2" == "" ]; then
	if [ -e /RepoMaker/repo.conf ]; then
CONFIG_FILE="/RepoMaker/repo.conf"
. $CONFIG_FILE
fi
fi

if [ "$2" == "$REPO2" ]; then
	if [ -e /RepoMaker/repo2.conf ]; then
CONFIG_FILE="/RepoMaker/repo2.conf"
. $CONFIG_FILE
fi
fi

if [ "$2" == "$REPO3" ]; then
	if [ -e /RepoMaker/repo3.conf ]; then
CONFIG_FILE="/RepoMaker/repo3.conf"
. $CONFIG_FILE
fi
fi

if [ "$2" == "$REPO4" ]; then
	if [ -e /RepoMaker/repo4.conf ]; then
CONFIG_FILE="/RepoMaker/repo4.conf"
. $CONFIG_FILE
fi
fi

if [ "$2" == "$REPO5" ]; then
if [ -e /RepoMaker/repo5.conf ]; then
CONFIG_FILE="/RepoMaker/repo5.conf"
. $CONFIG_FILE
fi
fi

if [ ! -e /RepoMaker/upload_$LOCALREPODIR ]; then
	mkdir /RepoMaker/orginal_$LOCALREPODIR
	mkdir /RepoMaker/upload_$LOCALREPODIR
	mkdir /RepoMaker/upload_$LOCALREPODIR/deb
	mkdir /RepoMaker/orginal_$LOCALREPODIR
	chmod 777 /RepoMaker/orginal_$LOCALREPODIR
	chmod 777 /RepoMaker/upload_$LOCALREPODIR
	chmod 777 /RepoMaker/upload_$LOCALREPODIR/deb
	chmod 777 /RepoMaker/orginal_$LOCALREPODIR
fi

if [ -e /RepoMaker/sample_repo.conf ]; then
	echo "Please edit the sample_reppo.conf file and rename it..."
	exit 1
fi

if [ "$DIE" == "YES" ]; then
	echo "Config file not edited correctly..."
	exit 1
fi

if [ "$2" == "-nh" ] || [ "$3" == "-nh" ]; then
	HADRLINKS="NO"
fi

##############################################

if [ "USESFTP" == "YES" ]; then
	protocol="sftp"
else
	protocol="ftp"
fi

########### check for update messages and version ##############

function checkforupdatemsg() { 
updatemsg=$(curl -s http://dl.dropbox.com/u/1299881/update)
showmsg=$(echo "$updatemsg" | awk 'NR==1' | awk '{print $1}')
updateforme=$(curl -s http://dl.dropbox.com/u/1299881/update | awk 'NR==1' | awk '{print $3}')
convertforme=$(echo "$updateforme" | sed 's/\.//g')
convertversion=$(echo "$VERSION" | sed 's/\.//g')
if [ "$convertforme" -gt "$convertversion" ]; then
	if [ "$showmsg" != "NOUPDATE" ]; then
		clear 
	echo "$updatemsg"

	if [ "$showmsg" != "NOUPDATE" ]; then
		sleep 10
	fi
	fi
fi
}

today=$(date '+%Y%m%d')
if [ -e /RepoMaker/.updatedate ]; then
	lastupdate=$(cat /RepoMaker/.updatedate)
	if [ "$today" != "$lastupdate" ]; then
		checkforupdatemsg
	echo "$today" > /RepoMaker/.updatedate
	fi
else
	echo "$today" > /RepoMaker/.updatedate
	checkforupdatemsg
fi


# Define LOG Files and Folders #

if [ -e /RepoMaker/.updatelogpath ]; then
	logpath=$(cat /RepoMaker/.updatelogpath)
	updatelog=$(echo "$logpath/update.log")
fi

# Logs in /User/Library/Logs/RepoMaker
if [ "$EUID" -ne "0" ]; then
	if [ ! -e $HOME/Library/Logs/RepoMaker ]; then
		mkdir -p $HOME/Library/Logs/RepoMaker
	fi
	if [ ! -e /RepoMaker/.updatelogpath ]; then
	cd $HOME/Library/Logs/RepoMaker
	updatelog=$(pwd)
	echo $updatelog > /RepoMaker/.updatelogpath
	fi

	recompilelog="$HOME/Library/Logs/RepoMaker/recompile.log"
	debcreate="$HOME/Library/Logs/RepoMaker/debcreate.log"
	controllog="$HOME/Library/Logs/RepoMaker/control.log"
	uploadlog="$HOME/Library/Logs/RepoMaker/upload.log"
	commonlog="$HOME/Library/Logs/RepoMaker/common.log"
	#updatelog="$HOME/Library/Logs/RepoMaker/update.log"

	if [ ! -e $HOME/Library/Logs/RepoMaker/recompile.log ]; then
		echo "" > $recompilelog
	fi

	if [ ! -e $HOME/Library/Logs/RepoMaker/debcreate.log ]; then
		echo "" > $debcreate
	fi

	if [ ! -e $HOME/Library/Logs/RepoMaker/control.log ]; then
		echo "" > $controllog
	fi

	if [ ! -e $HOME/Library/Logs/RepoMaker/upload.log ]; then
		echo "" > $uploadlog
	fi

	if [ ! -e $HOME/Library/Logs/RepoMaker/update.log ]; then
		echo "" > $updatelog
	fi
else
	echo ""
fi
################### HELP FUNCTION ###################

function showhelp() {
clear
	echo " "
	echo "RepoMaker $VERSION by cytec"
	echo " "
	echo -e "\033[1mSYNOPSIS\033[0m"
	echo -e "\033[1m\trepo\033[0m [option]... [reponumber]... [optional runtime argument]..."
	echo " "
	echo -e "\033[1mOPTIONS\033[0m"
	echo -e "\033[1m\t-n or --new-repo\033[0m\n\t\tcreate a new repository"
	echo -e "\033[1m\t-b or --build-debs\033[0m\n\t\tbuilding debs from apps folder"
	echo -e "\033[1m\t-h or --help\033[0m\n\t\tshow this help screen"
	echo -e "\033[1m\t-u or --update-script\033[0m\n\t\tcheck for RepoMaker updates"
	echo -e "\033[1m\t-upload or --upload-repo\033[0m\n\t\tUpload a new created Repo to your FTP Server"
	echo -e "\033[1m\t-update or --update-repo\033[0m\n\t\tUpdate an existing Repo (just new debs)"
	echo -e "\033[1m\t-r or --redeb\033[0m\n\t\trecompile debs from debs folder with your Repo Infos"
	echo -e "\033[1m\t-re or --recompile-only\033[0m\n\t\tsame as -r but without making debs"
	echo -e "\033[1m\t-c or --conrol\033[0m\n\t\tcreate new editable control file in apps dir"
	echo -e "\033[1m\t-a or --about\033[0m\n\t\tshows about screen"
	echo -e "\033[1m\t-gr or --get-repo\033[0m\n\t\tDownload a whole Repo"
	echo -e "\033[1m\t-gpkg or --get-package-name\033[0m\n\t\tget Package from selectet Repo by Name"
	echo -e "\033[1m\t-gpkgno or --get-package-number\033[0m\n\t\tget Package from selectet Repo by Number"
	echo -e "\033[1m\t-undeb or --undeb-package\033[0m\n\t\tunpack all debs locatet in the debs folder with original settings"
	echo -e "\033[1m\t-upper or --transform-uppercase\033[0m\n\t\ttransform lowercase first letters in Packages File to uppercase"
	echo -e "\033[1m\t-v or --version-check\033[0m\n\t\tcheck which version of a Package is on your Repo"
	echo -e "\033[1m\t--rm or --remove\033[0m\n\t\tremove a Package from Repo (currently only MultiUser Repos sry)"
	echo -e "\033[1m\t-chk or --check-files\033[0m\n\t\tcheck for newer files on Repo (MultiUser only)"
	echo -e "\033[1m\t-chklcl or --check-files-local\033[0m\n\t\tcheck for local files which are deleted on Repo (MultiUser only)"
	echo -e "\033[1m\t-create or --create-new\033[0m\n\t\tcreate a new App/Theme etc... Dirs locatet inside apps"
	echo -e "\033[1m\t-makesetup or --make-repogui\033[0m\n\t\tif you use gpg Signing this will make your RepoSetup"
	echo " "
	echo -e "\033[1mOPTIONAL RUNTIME ARGUMENTS\033[0m"
	echo -e "\033[1m\t-nh or --no-hardlink\033[0m\n\tUse on 2nd or 3rd place to disable hardlinks for this run only!"
	echo " "
	echo -e "\033[1mARGUMENTS\033[0m"
	echo -e "\033[1m\trepo\033[0m without  an specified [ reponumber ] always the first/main Repo will be used, support for up to 4 repos out of the box."
	echo " "
	echo -e "\tfor more Help please use \033[1mman repo\033[0m"
	echo ""
}

################### MAKE DEB FUNCTION ###################

function letsmakedebs() {
	cd /RepoMaker/apps
	find . -name .DS_Store -exec rm {} \;
	find . -name Thumbs.db -exec rm {} \;
	echo "[$(date +%D) $(date +%T)] Creating new DEB Files from Scratch" >> $debcreate
	for app in $( ls -1 . )
	do	
	if [ -e ${app}/Library/Themes ] || [ -e ${app}/Themes ]; then
		if [ "$HADRLINKS" == "YES" ]; then
			savespace=$(hardlink -tm ${app})
			echo "$savespace"  >> $commonlog 2>&1
			usersoutput=$(echo "$savespace" | grep Saved:)
		echo ""$usersoutput" running hardlink..." 
		echo " " >> $commonlog 2>&1
		fi
	fi
		dpkg-deb -b ${app} >> $debcreate 2>&1
		cp *.deb /RepoMaker/updatedebs/
		if [ "$DEBBACKUPNAME" == "YES" ]; then
			deb="${app}.deb"
			version=$(dpkg-deb -f $deb Version | sed 's/ //g')
				if [ ! -e /RepoMaker/olddebs_$LOCALREPODIR/${app}/ ]; then
					mkdir /RepoMaker/olddebs_$LOCALREPODIR/${app}/
				fi
			cp ${app}.deb /RepoMaker/olddebs_$LOCALREPODIR/${app}/${app}-$version.deb
		fi
	    mv *.deb /RepoMaker/upload_$LOCALREPODIR/deb/
	if [ "$KEEPZIP" == "YES" ]; then
		zip -rm "${app}.zip" ${app}
	    mv *.zip /RepoMaker/orginal_$LOCALREPODIR/
	else
		rm -rf ${app}
	fi
	done
echo "" >> $debcreate
	cd /RepoMaker/upload_$LOCALREPODIR/
	
}

function installmanpage() {
	if [ "$EUID" -ne "0" ]; then
		echo "run as root..."
		exit 1
	else
		curl -s -o /usr/share/man/man1/repo.1 http://dl.dropbox.com/u/1299881/RepoMaker%20STUFF/repo.1 
		echo "Man page installed..."
		echo "you can use it now with: man repo"
		exit 1
	fi
}

if [ "$1" == "--install-manpage" ]; then
	installmanpage
fi

################### FIRSTRUN COMMAND ###################

if [ "$1" == "" ]; then
 showhelp
fi

################### NEW REPO COMMAND ###################

if [ "$1" == "-n" ] || [ "$1" == "--new-repo" ] ; then
		echo "Name of your Repo:"
		read reponame
		echo "Description of Repo:"
		read repodescription
		if [ -e /RepoMaker/upload_$LOCALREPODIR ]; then
			cd /RepoMaker/upload_$LOCALREPODIR/
			echo -e "Origin: $reponame\nLable: $reponame\nSuite: stable\nVersion: 1.0\nCodename: stable\nArchitectures: iphoneos-arm\nComponents: main\nDescriptoion: $repodescription" > Release
			clear
			echo "Release File for $reponame created"
		else
			echo "please run -install first"
		fi
fi

################### MAKE PACKAGES COMMAND ###################

if [ "$1" == "-b" ] || [ "$1" == "--build-debs" ]; then
letsmakedebs
fi

################### HELP COMMAND ###################

if [ "$1" == "-h" ] || [ "$1" == "-help" ]; then
 clear
showhelp
fi

################### UPDATE COMMAND ###################

if [ "$1" == "-u" ] || [ "$1" == "--update-script" ]; then
	Location=$(dirname "$0")
	cd $Location
	if [ "$EUID" -ne "0" ]; then
		echo "please run as root."
 	else
		echo "looking for servers"
		dropbox=$(curl http://dl.dropbox.com/u/1299881/repo-dev | awk 'NR==1')
		if [ "$dropbox" == "# ! bin/bash" ]; then
			echo "Dropbox online..."
			UPDATEPATH="http://dl.dropbox.com/u/1299881/repo-dev"
		else
			cytec=$(curl http://cytec.us/tools/repo | awk 'NR==1')
			if [ "$cytec" == "# ! bin/bash" ]; then
				echo "cytec.us online..."
				UPDATEPATH="http://cytec.us/tools/repo"
			fi
		fi
		echo "Checking for Updates..."
		before=$(md5sum repo)
		curl -s $UPDATEPATH -o repo
		echo "[$(date +%D) $(date +%T)] Updatet to last Stable Version" >> $updatelog
		chmod 755 repo
		after=$(md5sum repo)
			if [ "$before" == "$after" ]; then
				echo "no updates found or no internet connection"
			else
				echo "Updatet to Latest STABLE BETA Version"
				exit
			fi
	fi
fi


################### UPLOAD COMMAND ###################

if [ "$1" == "-upload" ] || [ "$1" == "--upload-repo" ]; then
		cd /RepoMaker/upload_$LOCALREPODIR/deb/
		for deb in $( ls -1c . )
		do	
			curl -T ${deb} $protocol://$FTPSERVER/$FTPDIR/deb/ --ftp-create-dirs --user $FTPUSER:$FTPPASS	
			echo "[$(date +%D) $(date +%T)] $deb uploaded to $FTPSERVER" >> $uploadlog					
		done

		cd /RepoMaker/upload_$LOCALREPODIR
		if [ "$PACKNAME" == "" ]; then
			PACKNAME="Packages"
		fi
		
		if [ -e "/RepoMaker/upload_$LOCALREPODIR/Packages" ]; then
		rm $PACKNAME.bz2
		rm $PACKNAME
		fi		
		dpkg-scanpackages . /dev/null > $PACKNAME
		bzip2 $PACKNAME
		cp $PACKNAME.bz2 "$PACKNAME"2.bz2
		bunzip2 "$PACKNAME"2.bz2
		mv "$PACKNAME"2 $PACKNAME
		curl -T "{Packages,Packages.bz2,Release}" $protocol://$FTPSERVER/$FTPDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
		if [ "$MULTIUSER" == "YES" ]; then
			cd /RepoMaker/upload_$LOCALREPODIR/deb/ 
			ls -1c > /RepoMaker/upload_$LOCALREPODIR/onlinefiles
		curl -T "{onlinefiles}" $protocol://$FTPSERVER/$FTPDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
		rm -rf onlinefiles
	fi
fi

################### UPDATE COMMAND ###################

if [ "$1" == "-update" ] || [ "$1" == "--update-repo" ]; then
			cd /RepoMaker/updatedebs/
			for deb in $( ls -1c . )							
			do	
			if [ "$MOREOUTPUT" == "YES" ]; then
			echo "uploading deb: $deb"
			fi
			
			if [ "$MULTIUSER" == "YES" ]; then
				curl -s -o /RepoMaker/upload_$LOCALREPODIR/onlinefiles $protocol://$FTPSERVER/$FTPDIR/onlinefiles --user $FTPUSER:$FTPPASS 
				onlineversion=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep $deb | awk '{print $3}' | sed 's/\.//g' | sed 's/-//g' | sed 's/[a-z]//g' | sed 's/[A-Z]//g')
				localversion=$(dpkg -f $deb Version | sed 's/\.//g' | sed 's/-//g' | sed 's/[a-z]//g' | sed 's/[A-Z]//g')
				if [ "$onlineversion" -gt "$localversion" ]; then
					echo "The online Version for $deb is higher then you local one..."
					echo "Update it anyway? [y/n]"
					read updatesure
					if [ "$updatesure" == "y" ]; then
						curl -s -T ${deb} $protocol://$FTPSERVER/$FTPDIR/deb/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
					else
						echo "Skipping $deb because a newer version is already online"	
					fi
				fi
			
				curl -s -T ${deb} $protocol://$FTPSERVER/$FTPDIR/deb/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
				version=$(dpkg-deb -f $deb Version)
				echo "[$(date +%D) $(date +%T)] $deb Version: $version uploaded to $FTPSERVER" >> $uploadlog
				rm -rf /RepoMaker/upload_$LOCALREPODIR/onlinefiles
			else
				curl -s -T ${deb} $protocol://$FTPSERVER/$FTPDIR/deb/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
				version=$(dpkg-deb -f $deb Version)
				echo "[$(date +%D) $(date +%T)] $deb Version: $version uploaded to $FTPSERVER" >> $uploadlog					
			fi
			done
			cd /RepoMaker/upload_$LOCALREPODIR/
		
			if [ "$MULTIUSER" == "YES" ]; then
					cd /RepoMaker/upload_$LOCALREPODIR
				#	curl $PKGURL | grep Filename: | sed "s/Filename: ./$REPOURL/g" > onlinefiles
					curl -s -o onlinefiles $protocol://$FTPSERVER/$FTPDIR/onlinefiles --user $FTPUSER:$FTPPASS 
					echo "Downloading list of Files... done"
				#	cd /RepoMaker/upload_$LOCALREPODIR/deb/
					echo "now downloading newer Files from Repo..."
					
					cd /RepoMaker/upload_$LOCALREPODIR/deb
					cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | awk '{print $2}' > /RepoMaker/upload_$LOCALREPODIR/remotefiles
					for file in $( ls -1 )
					do
					oldsum=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep "$file" | awk '{print $1}')
					newsum=$(md5sum $file | awk '{print $1}')
					dlfile=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep "$file" | awk '{print $2}')
					if [ "$oldsum" != "$newsum" ] && [ "$oldsum" != "" ]; then
						echo "Missmatch on File: $dlfile" 
						echo "donwload it or update? [d/u]"
						read du
					if [ "$du" == "d" ] || [ "$du" == "download" ]; then
					    echo "downloading $dlfile"
						curl -s -o ${dlfile} $protocol://$FTPSERVER/$FTPDIR/deb/${dlfile} --user $FTPUSER:$FTPPASS
					else 
						echo "$dlfile ... OK"
					fi
					fi
					done
					cd /RepoMaker/upload_$LOCALREPODIR/deb
					while read line
					do
					if [ ! -e "/RepoMaker/upload_$LOCALREPODIR/deb/$line" ]; then
					echo "Local File not found: $line downloading..."
					curl -s -o ${line} $protocol://$FTPSERVER/$FTPDIR/deb/${line} --user $FTPUSER:$FTPPASS
					fi
					done < "/RepoMaker/upload_$LOCALREPODIR/remotefiles"
					rm -rf /RepoMaker/upload_$LOCALREPODIR/remotefiles
					sleep 3
					cd /RepoMaker/upload_$LOCALREPODIR/
					rm -rf onlinefiles
					
					cd /RepoMaker/upload_$LOCALREPODIR/deb/
					for file in $( ls -1 )
					do
					checksums=$(md5sum $file) # >> /RepoMaker/upload_$LOCALREPODIR/onlinefiles
					version=$(dpkg -f $file Version)
					echo "$checksums $version" >> /RepoMaker/upload_$LOCALREPODIR/onlinefiles
				#	md5=$(md5sum $file)
				#	version=$(dpkg-deb -f $file Version | sed 's/\.//g' | sed 's/-//g')
				#	echo "$md5 $version" >> /RepoMaker/upload_$LOCALREPODIR/onlinefiles
					done
										
					
					
					
					
				cd /RepoMaker/upload_$LOCALREPODIR/
				curl -s -T "{onlinefiles}" $protocol://$FTPSERVER/$FTPDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
				rm -rf onlinefiles
			fi
			if [ "$UPDATEAPI" == "YES" ]; then
				cd /RepoMaker/updatedebs/
				for deb in $( ls -1c . )
					do
						appname=$(dpkg-deb -f $deb Name | sed 's/ /%20/g' | sed 's/&/+/g')
						version=$(dpkg-deb -f $deb Version | sed 's/ //g')
						description=$(dpkg-deb -f $deb Description | sed 's/ /%20/g')
						pkgname=$(echo $appname | tr '[:upper:]' '[:lower:]')
						pkgname2=`echo "$pkgname" | sed 's/%20//g'`
						curl $APIURL\?Package=$pkgname2\&Description=$description\&Version=$version\&Name=$appname
					done
			fi
			cd /RepoMaker/upload_$LOCALREPODIR
			if [ "$PACKNAME" == "" ]; then
				PACKNAME="Packages"
			fi
			if [ -e "/RepoMaker/upload_$LOCALREPODIR/$PACKNAME" ]; then
			rm $PACKNAME.bz2
			rm $PACKNAME
			fi
			dpkg-scanpackages . /dev/null > $PACKNAME
			bzip2 -k $PACKNAME
			#cp $PACKNAME.bz2 "$PACKNAME"2.bz2
			#bunzip2 "$PACKNAME"2.bz2
			#mv "$PACKNAME"2 $PACKNAME
			if [ "$MOREOUTPUT" == "YES" ]; then
				echo "uploading Packages Files... DONE"
			fi
			if [ "$BZ2ONLY" == "YES" ]; then
				curl -T "{$PACKNAME.bz2}" $protocol://$FTPSERVER/$FTPDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
			else
				curl -T "{$PACKNAME,$PACKNAME.bz2}" $protocol://$FTPSERVER/$FTPDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
			fi
			cd /RepoMaker/updatedebs/
				rm -rf *.deb
		
		
			if [ "$UPLOADSCREENS" == "YES" ]; then
				if [ ! -e /RepoMaker/updatescreenshots ]; then
					mkdir /RepoMaker/updatescreenshots
				fi
			cd /RepoMaker/updatescreenshots
			for screen in $( ls -1c )							
			do	
				if [ "$MOREOUTPUT" == "YES" ]; then
					echo "uploading screenshot: $screen... DONE"
				fi
				curl -T ${screen} $protocol://$FTPSERVER/$FTPDIR/screenshots/ --ftp-create-dirs --user $FTPUSER:$FTPPASS	
				if [ ! -e /RepoMaker/screenshots_$LOCALREPODIR ]; then
					mkdir /RepoMaker/screenshots_$LOCALREPODIR
				fi
				mv $screen /RepoMaker/screenshots_$LOCALREPODIR
			done
			fi
			
			if [ "$USEGPG" == "YES" ]; then
				cd /RepoMaker/upload_$LOCALREPODIR

				checker=$(cat /RepoMaker/upload_$LOCALREPODIR/Release | grep MD5)
				if [ "$checker" == "MD5Sum:" ]; then
				sed -i '' "s/MD5Sum:.*//g" Release
				sed -i '' '/Packages/d' Release
				sed -i '' '/Packages.bz2/d' Release
				sed -i '' '/^$/d' Release
				fi
				size1=$(wc -c <Packages.bz2 | sed "s/ //g")
				size2=$(wc -c <Packages | sed "s/ //g")

				md51=$(md5sum Packages.bz2 | sed "s/  Packages.*//g")
				md52=$(md5sum Packages | sed "s/  Packages.*//g")

echo "MD5Sum:
 $md52 $size2 Packages
 $md51 $size1 Packages.bz2
" >> Release
				if [ "$PASSPHRASE" != "" ]; then
				echo "$PASSPHRASE" | gpg --passphrase-fd 0 -abs -u $KEYUSER -o Release.gpg Release
				else
				gpg -abs -u $KEYUSER -o Release.gpg Release
				fi
				if [ "$MOREOUTPUT" == "YES" ]; then
				echo "uploading Release.gpg... DONE"
				fi
				curl -s -T "{Release.gpg,Release}" $protocol://$FTPSERVER/$FTPDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS
				mv Release.gpg old_release.gpg
				#rm -rf Release.gpg
			fi
			
			if [ "$UPLOADDEPIC" == "YES" ]; then
				cd /RepoMaker/$DEPICDIR
				for depic in $( ls -1c | grep html )							
				do	
					if [ "$MOREOUTPUT" == "YES" ]; then
					echo "uploading Depiciton:$depic... DONE"
					fi
					curl -s -T ${depic} $protocol://$FTPSERVER/$FTPDIR/$DEPICDIR/ --ftp-create-dirs --user $FTPUSER:$FTPPASS	
				done
			fi
			
			rm -rf /RepoMaker/updatedebs/
			mkdir /RepoMaker/updatedebs/
fi

################### RECOMPILE DEB COMMAND ###################
workdir="/RepoMaker/deb"
if [ "$1" == "-r" ] || [ "$1" == "--redeb" ]; then
	clear
	if [ ! -e /RepoMaker/olddebs_$LOCALREPODIR/ ]; then
		mkdir /RepoMaker/olddebs_$LOCALREPODIR
		chmod -R 777 /RepoMaker/olddebs_$LOCALREPODIR
	fi

	cd /RepoMaker/deb
	rm -rf .DS_Store
		echo "[$(date +%D) $(date +%T)] Rebuilding Debs from other Sources" >> $recompilelog
	for source in $( ls -1 *.deb)
			do	
		cd /RepoMaker/deb
		
	   appname=$(dpkg-deb -f $source Name | tr '\r' '#' | sed 's/&*//g' | sed 's/#*//g'  | sed 's/,//g' | sed 's/\\.//g' | sed 's/\.*//g' | sed 's/!//g' | sed 's/\///g')
		version=$(dpkg-deb -f $source Version | sed 's/ //g')
	   name=`echo "$appname" | sed 's/ //g' | sed 's/+*//g'`
		pkgname=$(echo $appname | tr '[:upper:]' '[:lower:]')
		pkgname2=`echo "$pkgname" | sed 's/ //g' | sed 's/+//g' | sed 's/(//g' | sed 's/)//g' | sed 's/"//g' | sed 's/\[//g' | sed 's/\]//g' | sed "s/'//g"` # | cut -c 1-15
#	   deb=$(echo "$PKGID.$pkgname2-$version")
	if [ "$VERSIONNAMES" == "YES" ]; then
		deb=$(echo "$PKGID.$pkgname2-$version")
	else
		deb=$(echo "$PKGID.$pkgname2")
	   
	   fi
		before=$(dpkg-deb -f $source)
		echo "$before" > $deb.txt
		echo "$before" >> $controllog
		today=$(date '+%Y%m%d')
	   mkdir /RepoMaker/deb/$deb
	 	 echo "Extracting input deb........ Done."
		   # mkdir controlfiles
		   # 		   mv control.tar.gz controlfiles/
		   # 		   echo "Moving control gzip......... Done."
		   # 		   cd $workdir/controlfiles
		   # 		   gunzip control.tar.gz
		   # 		   tar -xf control.tar
		   # 		   echo "Extracting control file/s... Done."
		dpkg -x $source /RepoMaker/deb/$deb/
		dpkg -e $source /RepoMaker/deb/$deb/DEBIAN/
		cd /RepoMaker/deb/$deb/DEBIAN/
			mv control control_2
			fixcontrol="/RepoMaker/deb/$deb/DEBIAN/control_2"
		   control="/RepoMaker/deb/$deb/DEBIAN/control"

			cat $fixcontrol | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' | tr '\t' '#' | awk '{sub(/./,toupper(substr($1,1,1)),$1)}1' | tr '#' '\t' > $control #| tr '\t' '#' | sed 's/#//g'
		   # cd /RepoMaker/deb
		   # 		   mkdir datafiles
		   # 		   mv /RepoMaker/deb/data.tar.gz /RepoMaker/deb/$deb/
		   # 		   echo "Moving data gzip............ Done."
		   # 		   cd $workdir/$deb
		   # 		   gunzip data.tar.gz
		   # 		   tar -xf data.tar
		   # 		   echo "Extracting data files....... Done."
		   # 		   rm data.tar
		   # 		   mkdir DEBIAN
		  # if [ -e /RepoMaker/deb/controlfiles/postinst ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/postinst /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		   if [ -e /RepoMaker/deb/controlfiles/preinst ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/preinst /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/prerm ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/prerm /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/postrm ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/postrm /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/extrainst ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/extrainst /RepoMaker/deb/$deb/DEBIAN
		  # 			fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/extrainst_ ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/extrainst_ /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		   echo "Copying pre/postinst's...... Done."
		   cd $workdir
		   rm -rf $fixcontrol
	author=$(dpkg-deb -f $source Author | sed 's/<.*//g')
	description=$(dpkg-deb -f $source Description)
	depends=$(dpkg-deb -f $source Depends)
	#section=$(dpkg-deb -f $source Section)
	tags=$(dpkg-deb -f $source Tag)

	# Build new control.
WEBSITE2=$(echo "$WEBSITE" | sed 's/\//\\\//g' | sed 's/"//g' | sed 's/=//g')
DEPICURL2=$(echo "$DEPICURL" | sed 's/\//\\\//g' | sed 's/"//g' | sed 's/=//g') # | sed 's/[A-Z]//g' 
SPONSOR2=$(echo "$SPONSOR" | sed 's/\//\\\//g')
SUPPORT2=$(echo "$SUPPORT" | sed 's/\//\\\//g')

newcontrol="$deb/DEBIAN/control"

if [ "$SYSNOMAC" == "YES" ]; then
if [ "$tags" == "cydia::commercial" ]; then
	sed -i '/Tag:.*/d' $newcontrol
	sed -i '/tag:.*/d' $newcontrol
else
	sed -i 's/cydia::commercial,*//g' $newcontrol
fi
else

if [ "$tags" == "cydia::commercial" ]; then
	sed -i '' '/Tag:.*/d' $newcontrol
	sed -i '' '/tag:.*/d' $newcontrol
else
	sed -i '' 's/cydia::commercial,*//g' $newcontrol
fi
fi

if [ "$OWNSECTION" == "YES" ] && [ "$SECTION" != "" ]; then
	if [ "$SYSNOMAC" == "YES" ]; then
	sed -i "s/Section: .*/Section: $SECTION/g" $newcontrol
	else
	sed -i '' "s/Section: .*/Section: $SECTION/g" $newcontrol
	fi
fi

if [ "$DELETEMAIL" == "YES" ]; then
	checforown=$(dpkg-deb -f $source Package)
	if [[ "$checforown" == "$PKGID.*" ]]; then
		OWNPKG="YES"
	else
		OWNPKG="NO"
	fi
	if [ "$OWNPKG" == "NO" ]; then
		sed -i '' 's/<.*@.*//g' $newcontrol
	fi
	if [ "$OWNPKG" == "NO" ] && [ "$SYSNOMAC" == "YES" ]; then
		sed -i 's/<.*@.*//g' $newcontrol
	fi
fi
if [ "$FORCEDELETEMAIL" == "YES" ]; then
	sed -i '' 's/<.*@.*//g' $newcontrol
fi
if [ "$FORCEDELETEMAIL" == "YES" ] && [ "$SYSNOMAC" == "YES" ]; then
	sed -i 's/<.*@.*//g' $newcontrol
fi

if [ "$SYSNOMAC" == "YES" ]; then
	sed -i "s/Package:.*/Package: $PKGID.$pkgname2/g" $newcontrol
	sed -i "s/Homepage:.*/Homepage: $WEBSITE2/g" $newcontrol
	sed -i "s/Website:.*/Website: $WEBSITE2/g" $newcontrol
	sed -i '/Support:.*/d' $newcontrol
	if [ "$REPLACEAUTHOR" == "YES" ]; then
		sed -i "s/Author:.*/Author: $NEWAUTHOR/g" $newcontrol
	fi
else

sed -i '' "s/Package:.*/Package: $PKGID.$pkgname2/g" $newcontrol
sed -i '' "s/Homepage:.*/Homepage: $WEBSITE2/g" $newcontrol
sed -i '' "s/Website:.*/Website: $WEBSITE2/g" $newcontrol
sed -i '' '/Support:.*/d' $newcontrol

if [ "$REPLACEAUTHOR" == "YES" ]; then
	sed -i '' "s/Author:.*/Author: $NEWAUTHOR/g" $newcontrol
fi

fi

dependshere=$(cat $newcontrol | grep Depends)
if [ "$HAVEREPOGUI" == "YES" ] && [ "$dependshere" != "" ]; then
sed -i '' "s/^Depends: /Depends: $REPOGUI, /g" $newcontrol
fi
if [ "$HAVEREPOGUI" == "YES" ] && [ "$dependshere" != "" ] && [ "$SYSNOMAC" == "YES" ]; then
sed -i "s/^Depends: /Depends: $REPOGUI, /g" $newcontrol
fi
if [ "$HAVEREPOGUI" == "YES" ] && [ "$dependshere" == "" ]; then
echo "Depends: $REPOGUI" >> $newcontrol
fi
if [ "$HAVEAPI" == "YES" ]; then
 if [ "$SYSNOMAC" == "YES" ]; then
sed -i "s/Depiction:.*/Depiction: $DEPICURL2?package=$pkgname2/g" $newcontrol
else
	sed -i '' "s/Depiction:.*/Depiction: $DEPICURL2?package=$pkgname2/g" $newcontrol
fi
else 
	if [ "$HAVEAPI" == "NO" ]; then
		if [ "$SYSNOMAC" == "YES" ]; then
		sed -i "s/Depiction:.*/Depiction: $DEPICURL2\/$pkgname2.html/g" $newcontrol
		else
		sed -i '' "s/Depiction:.*/Depiction: $DEPICURL2\/$pkgname2.html/g" $newcontrol
		fi
	fi
fi
depichere=$(cat $newcontrol | grep Depiction)
if [ "$HAVEAPI" == "YES" ] && [ "$depichere" == "" ]; then
echo -e "Depiction: $DEPICURL?package=$pkgname2" >> $newcontrol
else 
	if [ "$HAVEAPI" == "NO" ] && [ "$AUTODEPIC" == "YES" ] &&  [ "$depichere" == "" ]; then
		echo -e "Depiction: $DEPICURL/$pkgname2.html" >> $newcontrol
	fi
fi
	if [ "$SYSNOMAC" == "YES" ]; then
		sed -i "s/Maintainer:.*/Maintainer: $MAINTAINER/g" $newcontrol
else
		sed -i '' "s/Maintainer:.*/Maintainer: $MAINTAINER/g" $newcontrol
	fi
spinsorhere=$(cat $newcontrol | grep Sponsor)
if [ "$SPONSOR"  == "" ] && [ "$spinsorhere" != "" ]; then
#	echo "sedding"
	SPONSOR1="RepoMaker 2.0 <http:\/\/cytec\.us\/#repomaker>"
	if [ "$SYSNOMAC" == "YES" ]; then
	sed -i "s/Sponsor:.*/Sponsor: $SPONSOR1/g" $newcontrol
	else
	sed -i '' "s/Sponsor:.*/Sponsor: $SPONSOR1/g" $newcontrol
	fi
fi

if [ "$SPONSOR" == "" ] && [ "$spinsorhere" == "" ]; then
#	echo "echoing"
	SPONSOR1="RepoMaker 2.0 <http://cytec.us/#repomaker>" 
	echo -e "Sponsor: $SPONSOR1\n" >> $newcontrol
fi
if [ "$SPONSOR" != "" ] && [ "$spinsorhere" == "" ]; then 
#	echo "config echo"
	echo -e "Sponsor: $SPONSOR\n" >> $newcontrol
fi
if [ "$SPONSOR" != "" ] && [ "$spinsorhere" != "" ]; then 
#	echo "config sed"
	if [ "$SYSNOMAC" == "YES" ]; then
	sed -i "s/Sponsor:.*/Sponsor: $SPONSOR2/g" $newcontrol
	else
	sed -i '' "s/Sponsor:.*/Sponsor: $SPONSOR2/g" $newcontrol
	fi
fi
	   echo "Building new control file... Done."
	   chmod -R 755 $deb/DEBIAN/
	   if [ -e $deb/DEBIAN/postinst ]; then
	      chmod 755 $deb/DEBIAN/postinst
	   fi
	   if [ -e $deb/DEBIAN/preinst ]; then
	      chmod 755 $deb/DEBIAN/preinst
	   fi
	   echo "CHMOD'ing pre/postinst's.... Done."
	   chmod -R 755 $deb
	cd $deb
	export COPYFILE_DISABLE
	export COPY_EXTENDED_ATTRIBUTES_DISABLE
	rm -rf .DS_Store
	cd $workdir
		if [ -e $deb/Library/Themes ] || [ -e $deb/Themes ]; then 
			echo "$deb/Themes"
			if [ "$HADRLINKS" == "YES" ]; then
				hardlink -tm $deb #>> $commonlog 2>&1
				echo " " >> $commonlog 2>&1
			fi	
		fi
	   dpkg -b $deb >> $recompilelog 2>&1
		echo "" >> $recompilelog
	   echo "Creating $deb.deb......... Done."
	   rm -rf debian-binary
	   rm -rf datafiles
	   rm -rf controlfiles
	   rm -rf $deb
	   cd $workdir
	echo "Building depiction.......... Done."
	echo "Check log for dpkg errors."
	escaped=$(echo "$description" | sed 's/ /\\ /g' | tr '\n' '\ \n')
	if [ "$AUTODEPIC" == "YES" ];then
	cat /RepoMaker/$DEPICDIR/caches/template.html | sed "s/<title>.*/<title>$appname - $version<\/title>/g" | sed "s/<p>.*/<p>$escaped<\/p>/g" | sed "s/twitter.com\/iCytec/twitter.com\/$TWITTER/g" > /RepoMaker/$DEPICDIR/$pkgname2.html
fi
	if [ "$AUTODEPIC" == "YES" ] && [ "$USETRACKER" == "YES" ];then
	cat /RepoMaker/$DEPICDIR/caches/template.html | sed "s/<title>.*/<title>$appname - $version<\/title>/g" | sed "s/<p>.*/<p>$escaped<\/p>/g" | sed "s/twitter.com\/iCytec/twitter.com\/$TWITTER/g" | sed "s/<\/html>/$TRACKERCODE<\/html>/g" > /RepoMaker/$DEPICDIR/$pkgname2.html
fi
	cd $workdir
	if [ "$d" = "y" ]; then
	size=$(stat -c%s "$deb.deb")
	fi
	if [ "$m" = "y" ]; then
	size=`du $deb.deb | awk {'print $1'}`
	fi
	md5=`md5sum $deb.deb | awk {'print $1'}`
	if [ ! -e /RepoMaker/updatedebs/ ]; then
	   mkdir /RepoMaker/updatedebs/
	fi
		after=$(dpkg-deb -f $deb.deb)
	echo " " >> $deb.txt
	echo "$after" >> $deb.txt
	echo " " >> $controllog
	echo "$after" >> $controllog
	echo "" >> $controllog
	echo "-----------------------------------------------" >> $controllog

	if [ "$DEBBACKUPNAME" == "YES" ]; then
	######## OLD DEBS WITH NAMES #################
	if [ ! -e /RepoMaker/olddebs_"$LOCALREPODIR" ]; then
		mkdir /RepoMaker/olddebs_"$LOCALREPODIR"
	fi
	if [ ! -e /RepoMaker/olddebs_$LOCALREPODIR/$deb ]; then
		mkdir /RepoMaker/olddebs_$LOCALREPODIR/$deb
	fi
	   cp $deb.deb /RepoMaker/olddebs_$LOCALREPODIR/$deb/$deb-$version.deb
	
	else
		if [ ! -e /RepoMaker/olddebs_"$LOCALREPODIR" ]; then
			mkdir /RepoMaker/olddebs_"$LOCALREPODIR"
		fi
		if [ ! -e /RepoMaker/olddebs_$LOCALREPODIR/$today ]; then
			mkdir /RepoMaker/olddebs_$LOCALREPODIR/$today
		fi
		   cp $deb.deb /RepoMaker/olddebs_$LOCALREPODIR/$today/$deb-$version.deb
	fi
	   cp $deb.deb /RepoMaker/updatedebs/
	   mv $deb.deb /RepoMaker/upload_$LOCALREPODIR/deb/
	done
		echo "" >> $recompilelog
			echo "-----------------------------------------------" >> $recompilelog
			echo "" >> $recompilelog
	read -p "Remove source debs? [y/n]:- " rvm
	if [ "$rvm" = "y" ]; then
			cd /RepoMaker/deb
	        rm *.deb
	fi
	fi
	
	################### RECOMPILE DEB dont DEB IT COMMAND ###################
	workdir="/RepoMaker/deb"
	if [ "$1" = "-re" ] || [ "$1" = "--recompile-only" ]; then
		clear
		if [ ! -e /RepoMaker/olddebs_$LOCALREPODIR/ ]; then
			mkdir /RepoMaker/olddebs_$LOCALREPODIR
			chmod -R 777 /RepoMaker/olddebs_$LOCALREPODIR
		fi

		cd /RepoMaker/deb
		rm -rf .DS_Store
			echo "[$(date +%D) $(date +%T)] Rebuilding Debs from other Sources" >> $recompilelog
		for source in $( ls -1 *.deb)
				do	
			cd /RepoMaker/deb

		   appname=$(dpkg-deb -f $source Name | tr '\r' '#' | sed 's/&*//g' | sed 's/#*//g'  | sed 's/,//g' | sed 's/\\.//g' | sed 's/\.*//g' | sed 's/!//g' | sed 's/\///g' )
			version=$(dpkg-deb -f $source Version | sed 's/ //g')
		   name=`echo "$appname" | sed 's/ //g' | sed 's/+*//g'`
			pkgname=$(echo $appname | tr '[:upper:]' '[:lower:]')
			pkgname2=`echo "$pkgname" | sed 's/ //g' | sed 's/+//g' | sed 's/(//g' | sed 's/)//g' | sed 's/"//g' | sed 's/\[//g' | sed 's/\]//g' | sed "s/'//g"` # | cut -c 1-15
		   	if [ "$VERSIONNAMES" == "YES" ]; then
				deb=$(echo "$PKGID.$pkgname2-$version")
			else
				deb=$(echo "$PKGID.$pkgname2")

			   fi
			before=$(dpkg-deb -f $source)
			echo "$before" >> $controllog
			today=$(date '+%Y%m%d')
			cd $workdir
			echo "$before" > $deb.txt
		   mkdir /RepoMaker/deb/$deb
		   # ar -x /RepoMaker/deb/$source
		   # 		rm -rf .DS_Store
		clear	
		   echo "Extracting input deb........ Done."
		   # mkdir controlfiles
		   # 		   mv control.tar.gz controlfiles/
		   # 		   echo "Moving control gzip......... Done."
		   # 		   cd $workdir/controlfiles
		   # 		   gunzip control.tar.gz
		   # 		   tar -xf control.tar
		   # 		   echo "Extracting control file/s... Done."
		dpkg -x $source /RepoMaker/deb/$deb/
		dpkg -e $source /RepoMaker/deb/$deb/DEBIAN/
		cd /RepoMaker/deb/$deb/DEBIAN/
			mv control control_2
			fixcontrol="/RepoMaker/deb/$deb/DEBIAN/control_2"
		   control="/RepoMaker/deb/$deb/DEBIAN/control"

			cat $fixcontrol | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' | tr '\t' '#' | awk '{sub(/./,toupper(substr($1,1,1)),$1)}1' | tr '#' '\t' > $control #| tr '\t' '#' | sed 's/#//g'
		   # cd /RepoMaker/deb
		   # 		   mkdir datafiles
		   # 		   mv /RepoMaker/deb/data.tar.gz /RepoMaker/deb/$deb/
		   # 		   echo "Moving data gzip............ Done."
		   # 		   cd $workdir/$deb
		   # 		   gunzip data.tar.gz
		   # 		   tar -xf data.tar
		   # 		   echo "Extracting data files....... Done."
		   # 		   rm data.tar
		   # 		   mkdir DEBIAN
		  # if [ -e /RepoMaker/deb/controlfiles/postinst ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/postinst /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		   if [ -e /RepoMaker/deb/controlfiles/preinst ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/preinst /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/prerm ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/prerm /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/postrm ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/postrm /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/extrainst ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/extrainst /RepoMaker/deb/$deb/DEBIAN
		  # 			fi
		  # 		 if [ -e /RepoMaker/deb/controlfiles/extrainst_ ]; then
		  # 			      cp /RepoMaker/deb/controlfiles/extrainst_ /RepoMaker/deb/$deb/DEBIAN
		  # 		   fi
		  # 		   echo "Copying pre/postinst's...... Done."
		   cd $workdir
		   rm -rf $fixcontrol
		author=$(dpkg-deb -f $source Author | sed 's/<.*//g')
		description=$(dpkg-deb -f $source Description)
		depends=$(dpkg-deb -f $source Depends)
		section=$(dpkg-deb -f $source Section)
		tags=$(dpkg-deb -f $source Tag)

		# Build new control.
	WEBSITE2=$(echo "$WEBSITE" | sed 's/\//\\\//g' | sed 's/"//g' | sed 's/=//g')
	DEPICURL2=$(echo "$DEPICURL" | sed 's/\//\\\//g' | sed 's/"//g' | sed 's/=//g') # | sed 's/[A-Z]//g' 
	SPONSOR2=$(echo "$SPONSOR" | sed 's/\//\\\//g')
	SUPPORT2=$(echo "$SUPPORT" | sed 's/\//\\\//g')
	newcontrol="$deb/DEBIAN/control"


	if [ "$tags" == "cydia::commercial" ]; then
		sed -i '' '/Tag:.*/d' $newcontrol
		sed -i '' '/tag:.*/d' $newcontrol
	else
		sed -i '' 's/cydia::commercial,*//g' $newcontrol
	fi
	if [ "$DELETEMAIL" == "YES" ]; then
		checforown=$(dpkg-deb -f $source Package)
		if [[ "$checforown" == "$PKGID.*" ]]; then
			OWNPKG="YES"
		else
			OWNPKG="NO"
		fi
		if [ "$OWNPKG" == "NO" ]; then
			sed -i '' 's/<.*@.*//g' $newcontrol
		fi
	fi
	if [ "$FORCEDELETEMAIL" == "YES" ]; then
		sed -i '' 's/<.*@.*//g' $newcontrol
	fi
	sed -i '' "s/Package:.*/Package: $PKGID.$pkgname2/g" $newcontrol
	sed -i '' "s/Homepage:.*/Homepage: $WEBSITE2/g" $newcontrol
	sed -i '' "s/Website:.*/Website: $WEBSITE2/g" $newcontrol
	sed -i '' '/Support:.*/d' $newcontrol
	if [ "$REPLACEAUTHOR" == "YES" ]; then
		sed -i '' "s/Author:.*/Author: $NEWAUTHOR/g" $newcontrol
	fi
	dependshere=$(cat $newcontrol | grep Depends)
	if [ "$HAVEREPOGUI" == "YES" ] && [ "$dependshere" != "" ]; then
	sed -i '' "s/^Depends: /Depends: $REPOGUI, /g" $newcontrol
	fi
	if [ "$HAVEREPOGUI" == "YES" ] && [ "$dependshere" == "" ]; then
	echo "Depends: $REPOGUI" >> $newcontrol
	fi
	if [ "$HAVEAPI" == "YES" ]; then
	sed -i '' "s/Depiction:.*/Depiction: $DEPICURL2?package=$pkgname2/g" $newcontrol
	else 
		if [ "$HAVEAPI" == "NO" ]; then
			sed -i '' "s/Depiction:.*/Depiction: $DEPICURL2\/$pkgname2.html/g" $newcontrol
		fi
	fi
	depichere=$(cat $newcontrol | grep Depiction)
	if [ "$HAVEAPI" == "YES" ] && [ "$depichere" == "" ]; then
	echo -e "Depiction: $DEPICURL?package=$pkgname2" >> $newcontrol
	else 
		if [ "$HAVEAPI" == "NO" ] && [ "$depichere" == "" ]; then
			echo -e "Depiction: $DEPICURL/$pkgname2.html" >> $newcontrol
		fi
	fi
	sed -i '' "s/Maintainer:.*/Maintainer: $MAINTAINER/g" $newcontrol
	spinsorhere=$(cat $newcontrol | grep Sponsor)
	if [ "$SPONSOR"  == "" ] && [ "$spinsorhere" != "" ]; then
		SPONSOR1="RepoMaker 2.0 <http:\/\/cytec\.us\/#repomaker>"
		sed -i '' "s/Sponsor:.*/Sponsor: $SPONSOR1/g" $newcontrol
	fi

	if [ "$SPONSOR" == "" ] && [ "$spinsorhere" == "" ]; then
		SPONSOR1="RepoMaker 2.0 <http://cytec.us/#repomaker>"
		echo -e "Sponsor: $SPONSOR1\n" >> $newcontrol
	fi
	if [ "$SPONSOR" != "" ] && [ "$spinsorhere" == "" ]; then 
		echo -e "Sponsor: $SPONSOR\n" >> $newcontrol
	fi
	if [ "$SPONSOR" != "" ] && [ "$spinsorhere" != "" ]; then 
		sed -i '' "s/Sponsor:.*/Sponsor: $SPONSOR2/g" $newcontrol
	fi
	#	sed -i '' "s/Description:.*/Description: $description/g" $newcontrol


		   echo "Building new control file... Done."
		   chmod -R 755 $deb/DEBIAN/
		   if [ -e $deb/DEBIAN/postinst ]; then
		      chmod 755 $deb/DEBIAN/postinst
		   fi
		   if [ -e $deb/DEBIAN/preinst ]; then
		      chmod 755 $deb/DEBIAN/preinst
		   fi
		   echo "CHMOD'ing pre/postinst's.... Done."
		   chmod -R 755 $deb
		cd $deb
		export COPYFILE_DISABLE
		export COPY_EXTENDED_ATTRIBUTES_DISABLE
		rm -rf .DS_Store
		 cd $workdir
		
	
		  # dpkg -b $deb >> $recompilelog 2>&1
		  # 		 			echo "" >> $recompilelog
		  # 		 		   echo "Creating $deb.deb......... Done."
				   rm -rf debian-binary
		 		   rm -rf datafiles
		 		   rm -rf controlfiles

		 		mv $deb /RepoMaker/apps/$deb

		 			# after=$(dpkg-deb -f $deb.deb)
		 			#  		echo " " >> $deb.txt
		 			#  		echo "$after" >> $deb.txt
		 			#  		echo " " >> $controllog
		 			#  		echo "$after" >> $controllog
		 		echo "" >> $controllog
		 		echo "-----------------------------------------------" >> $controllog
		done
		read -p "Remove source debs? [y/n]:- " rvm
		if [ "$rvm" = "y" ]; then
				cd /RepoMaker/deb
		        rm *.deb
		fi
		fi


################### MAKE CONTROL COMMAND ###################

if [ "$1" == "-c" ] || [ "$1" == "--control" ]; then
echo -e "Package: $PKGID\nName:\nVersion: \nArchitecture: iphoneos-arm\nDepiction: \nDescription: \nDepends: $REPOGUI\nHomepage: $WEBSITE\nMaintainer: $MAINTAINER\nAuthor: $MAINTAINER\nSponsor: RepoMaker $VERSION\nSection:\n" > /RepoMaker/apps/control
echo "Control File created"
fi


################### ABOUT COMMAND ###################

if  [ "$1" = "-a" ] || [ "$1" = "--about" ]; then
	clear
	echo " "
	echo "RepoMaker $VERSION by cytec"
	echo "helps create/update Cydia Repositorys"
	echo "contact: @iCytec or cytec on irc"
	echo "Follow me on twitter ;)"
	echo " "
fi

################### ONLINE HELP COMMAND ###################

if  [ "$1" = "--help" ]; then
open http://cytec.us/tools/repo/help.html
fi

################### EXPERIMENTAL COMMANDS ###################

if [ "$1" == "-gr" ] || [ "$1" == "--get-repo" ]; then
cd /RepoMaker/deb
echo "Please enter Repo address (without http://)"
read repolink2
#checkexist=$(curl -s $repolink/Packages | grep \<html | sed 's/<html.*/Fail/g')
repolink=$(echo "$repolink2" | sed 's/\//\\\//g')
getdpk=$(curl -s $repolink2/Packages | grep Filename: | sed "s/Filename: /http:\/\/$repolink\//g")
	

	if [ "$getdpk" == "" ];then
		echo "Sorry nothing found..."
	else
		curl -s $repolink2/Packages | grep Filename: | sed "s/Filename: /http:\/\/$repolink\//g" > Packages
		echo "Found a repo under http://$repolink"
		echo "$(cat Packages | sed "s/http:\/\/$repolink\/*.*\///g")"
		echo "do you want to download those files? [y/n]"
		read -r answer
		if [ "$answer" == "y" ];then
		for debs in $(cat Packages)
		do
			debname=$(echo $debs | sed "s/http:\/\/$repolink\/*.*\///g")
		echo "Downloading ${debname}..."
		cd /RepoMaker/deb
		wget -N ${debs} > /dev/null 2>&1
		done
			else exit
		fi
	fi
	rm -rf Packages
fi


################### EXPERIMENTAL COMMANDS ###################

if [ "$1" == "-gpkg" ] || [ "$1" == "--get-package-name" ]; then
cd /RepoMaker/deb
echo "Please enter Repo address (without http://)"
read repolink2
repolink=$(echo "$repolink2" | sed 's/\//\\\//g')
#checkexist=$(curl -s $repolink/Packages | grep \<html | sed 's/<html.*/Fail/g')
getdpk=$(curl -s $repolink/Packages | grep Filename: | sed "s/Filename: /http:\/\/$repolink\//g")
	
	if [ "$getdpk" == "" ];then
		echo "Sorry nothing found..."
	else
		curl -s $repolink/Packages | grep Filename: | sed "s/Filename: /http:\/\/$repolink\//g" > Packages
		echo "Found a repo under http://$repolink"
		echo "$(cat Packages | sed "s/http:\/\/$repolink\/*.*\///g")"
		echo "which do you wanna download?"
		read -r answer
		deb=$(cat Packages | grep $answer)
		wget -N ${deb} > /dev/null 2>&1
	fi
	rm -rf Packages
fi

function download() {
	cd /RepoMaker/deb
	wget -N $input > /dev/null 2>&1
}

if [ "$1" == "-gpkgno" ] || [ "$1" == "--get-package-number" ]; then
	cd /RepoMaker/deb
	echo "Please enter Repo address (without http://)"
	read repolink2
	repolink=$(echo "$repolink2" | sed 's/\//\\\//g')
	getdpk=$(curl -s http://$repolink2/Packages | grep Filename: | sed "s/Filename: /http:\/\/$repolink\//g")
		if [ "$getdpk" == "" ];then
			echo "Sorry nothing found..."
		else
			curl -s $repolink2/Packages | grep Filename: | sed "s/Filename: /http:\/\/$repolink\//g" > Packages
			echo "Found a repo under http://$repolink"
			echo "Listing found Files:"
			echo ""
			sleep 2
			cd /RepoMaker/deb
			fail[0]="o.o"
					i=1
					while read line; do
						fail[$i]="$line"
						echo "$i -- $line" | sed "s/http:\/\/$repolink\/*.*\///g"
						i=$((i+1))
					done < /RepoMaker/deb/Packages

					read -p "Select a number:- " numbar
							for z in $numbar; do
								if [ -z ${fail["$z"]} ]; then
									echo "$z does not exist."
								else
									input="${fail[$z]}"
									echo " Downloading: $input ... Done" | sed "s/http:\/\/$repolink\/*.*\///g"
									download "$input"
								fi
							done
		fi
		rm -rf Packages
fi
		
###################### UPDATE TO DEV VERSION #########################
if [ "$1" == "-dev" ] || [ "$1" == "--dev-update" ]; then
	Location=$(dirname "$0")
	cd $Location
	if [ "$EUID" -ne "0" ]; then
		echo "please run as root."
 	else
		echo "looking for servers"
		dropbox=$(curl -s http://dl.dropbox.com/u/1299881/repo-dev | awk 'NR==2')
		if [ "$dropbox" == "# RepoMaker" ]; then
			echo "Dropbox online..."
			UPDATEPATH="http://dl.dropbox.com/u/1299881/repo-dev"
		else
			echo "Dropbox offline checking for cytec.us"
			cytec=$(curl -s http://cytec.us/tools/repo | awk 'NR==2')
			if [ "$cytec" == "# RepoMaker" ]; then
				echo "cytec.us online..."
				UPDATEPATH="http://cytec.us/tools/repo"
			else
				NOUPDATE="YES"
			fi
		fi
		
		if [ "$NOUPDATE" == "YES" ]; then
			echo "Sorry all update servers ar down... try again later"
		else
			echo "Checking for Updates..."
			before=$(md5sum repo)
		curl -s $UPDATEPATH -o repo
		chmod 755 repo
		after=$(md5sum repo)
			if [ "$before" == "$after" ]; then
				echo "no updates found or no internet connection"
			else
				echo "Updatet to Latest DEV Version"
				echo "[$(date +%D) $(date +%T)] Updatet to DEV Version" >> $updatelog
				exit 1
			fi
		fi
	fi
fi

function undeb() {
		cd /RepoMaker/deb			
		   appname=$(dpkg-deb -f $input Name | tr '\r' '#' | sed 's/&*//g' | sed 's/#*//g'  | sed 's/,//g' | sed 's/\\.//g' | sed 's/\.*//g' | sed 's/!//g' | sed 's/\///g' )
version=$(dpkg-deb -f $input Version | sed 's/ //g')
name=`echo "$appname" | sed 's/ //g' | sed 's/+*//g'`
pkgname=$(echo $appname | tr '[:upper:]' '[:lower:]')
pkgname2=$(echo $pkgname | sed 's/ //g' | sed 's/+//g' | sed 's/(//g' | sed 's/)//g' | sed 's/"//g' | sed 's/\[//g' | sed 's/\]//g' | sed "s/'//g") # | cut -c 1-15
echo "$pkgname2"
deb=$(echo $PKGID.$pkgname2)			
	   mkdir /RepoMaker/deb/$deb
	   ar -x /RepoMaker/deb/$input
	rm -rf .DS_Store
	clear	
	   echo "Extracting input deb........ Done."
	   mkdir controlfiles
	   mv control.tar.gz controlfiles/
	   echo "Moving control gzip......... Done."
	   cd $workdir/controlfiles
	   gunzip control.tar.gz
	   tar -xf control.tar
	   echo "Extracting control file/s... Done."

	   control="controlfiles/control"
	   cd /RepoMaker/deb
	   mkdir datafiles
	   mv /RepoMaker/deb/data.tar.gz /RepoMaker/deb/$deb/
	   echo "Moving data gzip............ Done."
	   cd $workdir/$deb
	   gunzip data.tar.gz
	   tar -xf data.tar
	   echo "Extracting data files....... Done."
	   rm data.tar
	   mkdir DEBIAN
	   if [ -e /RepoMaker/deb/controlfiles/postinst ]; then
		      cp /RepoMaker/deb/controlfiles/postinst /RepoMaker/deb/$deb/DEBIAN
	   fi
	   if [ -e /RepoMaker/deb/controlfiles/preinst ]; then
		      cp /RepoMaker/deb/controlfiles/preinst /RepoMaker/deb/$deb/DEBIAN
	   fi
	 if [ -e /RepoMaker/deb/controlfiles/prerm ]; then
		      cp /RepoMaker/deb/controlfiles/prerm /RepoMaker/deb/$deb/DEBIAN
	   fi
	 if [ -e /RepoMaker/deb/controlfiles/postrm ]; then
		      cp /RepoMaker/deb/controlfiles/postrm /RepoMaker/deb/$deb/DEBIAN
	   fi
	 if [ -e /RepoMaker/deb/controlfiles/extrainst ]; then
		      cp /RepoMaker/deb/controlfiles/extrainst /RepoMaker/deb/$deb/DEBIAN
	   fi
	 if [ -e /RepoMaker/deb/controlfiles/extrainst_ ]; then
		      cp /RepoMaker/deb/controlfiles/extrainst_ /RepoMaker/deb/$deb/DEBIAN
	   fi
	   cd $workdir
	   cp $control $deb/DEBIAN/
		rm -rf controlfiles
		rm -rf datafiles
		rm -rf debian-binary
		rm -rf undeb
}

if [ "$1" == "-undeb" ] || [ "$1" == "--undeb-package" ]; then
		clear
		cd /RepoMaker/deb
		rm -rf .DS_Store
		echo "Place deb to unpack in /RepoMaker/deb then press return -"
		read -r enter
		if [ "$enter" == "" ]; then
			ls -1 *.deb > undeb
			echo "Availible Files:"
		fail[0]="o.o"
				i=1
				while read line; do
					fail[$i]="$line"
					echo "$i -- $line"
					i=$((i+1))
				done < /RepoMaker/deb/undeb

				read -p "Select a number:- " numbar
						for z in $numbar; do
							if [ -z ${fail["$z"]} ]; then
								echo "$z does not exist."
							else
								input="${fail[$z]}"
								undeb "$input"
							fi
						done
					fi
	fi
	
		

if [ "$1" == "-upper" ] || [ "$1" == "--transform-uppercase" ]; then
	cd /RepoMaker/upload_$LOCALREPODIR/
	rm Packages.bz2
cat Packages | awk '{sub(/./,toupper(substr($1,1,1)),$1)}1' > Packages_2
rm  Packages
mv Packages_2 Packages
bzip2 Packages
cp Packages.bz2 Packages2.bz2
bunzip2 Packages2.bz2
mv Packages2 Packages
fi

if [ "$1" == "-v" ] || [ "$1" == "--version-check" ]; then
	echo "Checking Versions..."
	echo "Please enter Package Name you like to search for:"
	read pkgname
	cd /RepoMaker/upload_$LOCALREPODIR/deb
	for deb in $( ls -1c | grep $pkgname)
	do
	version=$(dpkg-deb -f $deb Version)
	echo "$deb - Version: $version"
	done
	fi  
	
if [ "$1" == "-rm" ] || [ "$1" == "--remove" ]; then
	echo "enter packagename WITHOUT extension (example: us.cytec.cyBackup): "
	read name
	curl -s -Q "-DELETE "$name".deb" $protocol://$FTPSERVER/$FTPDIR/deb/ --user $FTPUSER:$FTPPASS
	echo "deleted from server..."
	cd /RepoMaker/upload_$LOCALREPODIR/deb
	rm -rf "$name".deb
	echo "deleted local file..."
	cd /RepoMaker/upload_$LOCALREPODIR/
	if [ "$MULTIUSER" == "YES" ]; then
	curl -s -o onlinefiles $protocol://$FTPSERVER/$FTPDIR/onlinefiles --user $FTPUSER:$FTPPASS 
	sleep 3
	sed -i '' '/'$name'/d' /RepoMaker/upload_$LOCALREPODIR/onlinefiles
	curl -s -Q "-DELETE "$name".deb" $protocol://$FTPSERVER/$FTPDIR/deb/ --user $FTPUSER:$FTPPASS
	curl -s -T onlinefiles $protocol://$FTPSERVER/$FTPDIR/ --user $FTPUSER:$FTPPASS 
	rm -rf onlinefiles
	fi
	echo "all done"
	echo "Please Run -update to update Packages and Packages.bz2"

fi

if [ "$1" == "-chk" ] || [ "$1" == "--check-files" ]; then
	cd /RepoMaker/upload_$LOCALREPODIR
#	curl $PKGURL | grep Filename: | sed "s/Filename: ./$REPOURL/g" > onlinefiles
	curl -s -o onlinefiles $protocol://$FTPSERVER/$FTPDIR/onlinefiles --user $FTPUSER:$FTPPASS 
	echo "Downloading list of Files... done"
#	cd /RepoMaker/upload_$LOCALREPODIR/deb/
	echo "checking Files..."
	
	cd /RepoMaker/upload_$LOCALREPODIR/deb
	cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | awk '{print $2}' > /RepoMaker/upload_$LOCALREPODIR/remotefiles
	for debfile in $( ls -1 )
	do
	oldsum=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep $debfile | awk '{print $1}' )
	newsum=$(md5sum $debfile | awk '{print $1}')
	dlfile=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep $debfile | awk '{print $2}')
	if [ "$oldsum" != "$newsum" ] && [ "$oldsum" != "" ]; then
		echo "Missmatch on File: $dlfile downloading..."
		curl -s -o ${dlfile} $protocol://$FTPSERVER/$FTPDIR/deb/${dlfile} --user $FTPUSER:$FTPPASS
	else 
		echo "$dlfile ... OK"
	fi
	done
	cd /RepoMaker/upload_$LOCALREPODIR/deb
	while read line
	do
	if [ ! -e "/RepoMaker/upload_$LOCALREPODIR/deb/$line" ]; then
	echo "Local File not found: $line downloading..."
	curl -s -o ${line} $protocol://$FTPSERVER/$FTPDIR/deb/${line} --user $FTPUSER:$FTPPASS
	fi
	done < "/RepoMaker/upload_$LOCALREPODIR/remotefiles"
	rm -rf /RepoMaker/upload_$LOCALREPODIR/remotefiles
	rm -rf /RepoMaker/upload_$LOCALREPODIR/onlinefiles
fi

if [ "$1" == "-chklcl" ] || [ "$1" == "--check-files-local" ]; then
	cd /RepoMaker/upload_$LOCALREPODIR
#	curl $PKGURL | grep Filename: | sed "s/Filename: ./$REPOURL/g" > onlinefiles
	curl -s -o onlinefiles $protocol://$FTPSERVER/$FTPDIR/onlinefiles --user $FTPUSER:$FTPPASS 
	echo "Downloading list of Files... done"
#	cd /RepoMaker/upload_$LOCALREPODIR/deb/
	echo "checking Files..."
	
	cd /RepoMaker/upload_$LOCALREPODIR/deb
	cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | awk '{print $2}' > /RepoMaker/upload_$LOCALREPODIR/remotefiles
	for debfile in $( ls -1 )
	do
	oldsum=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep $debfile | awk '{print $1}' )
	newsum=$(md5sum $debfile | awk '{print $1}')
	dlfile=$(cat /RepoMaker/upload_$LOCALREPODIR/onlinefiles | grep $debfile | awk '{print $2}')
	if [ "$dlfile" == "" ]; then
		echo "Seems like you deletet $debfile on your server..."
		echo "Delete it now local? [y/n]"
		read localdel
		if [ "$localdel" == "y" ]; then
			rm -rf $debfile
		else 
			echo "OK i wont delete $debfile for now..."
		fi
	fi
	done
	rm -rf /RepoMaker/upload_$LOCALREPODIR/remotefiles
	rm -rf /RepoMaker/upload_$LOCALREPODIR/onlinefiles
fi


function newcontrolfile() {
	echo "Package: $PKGID.
Version: 1.0
Section: 
Maintainer: $MAINTAINER
Depends: 
Architecture: iphoneos-arm
Description:
Depiction: $DEPICURL?package=
Name:
Author:
Sponsor: $SPONSOR" > /RepoMaker/apps/RenamePLS/DEBIAN/control
	
}


if [ "$1" == "-create" ] || [ "$1" == "--create-new" ]; then
	echo -e "At the moment i support\n \t 1) Themes\n \t 2) Apps\n \t 3) Utillitys\n \t 4) Tweaks\n \t 5) Ringtones\n \t 6) Wallpapers..."´
	echo "What do u wanna create? (enter number)"
	read whatcreate
	if [ "$whatcreate" == "1" ]; then
		if [ ! -e /RepoMaker/apps/RenamePLS/ ]; then
		mkdir /RepoMaker/apps/RenamePLS/
		mkdir /RepoMaker/apps/RenamePLS/Library
		mkdir /RepoMaker/apps/RenamePLS/Library/Themes
		mkdir /RepoMaker/apps/RenamePLS/DEBIAN
		newcontrolfile
		echo "Createt new Directory in /RepoMaker/apps"
		else
			echo "There is already a Unnamed Directory..."
		fi
	fi
	if [ "$whatcreate" == "2" ]; then
		if [ ! -e /RepoMaker/apps/RenamePLS/ ]; then
		mkdir /RepoMaker/apps/RenamePLS/
		mkdir /RepoMaker/apps/RenamePLS/Applications
		mkdir /RepoMaker/apps/RenamePLS/DEBIAN
		newcontrolfile
		echo "Createt new Directory in /RepoMaker/apps"
		else
			echo "There is already a Unnamed Directory..."
		fi
	fi
	if [ "$whatcreate" == "5" ]; then
		if [ ! -e /RepoMaker/apps/RenamePLS/ ]; then
		mkdir /RepoMaker/apps/RenamePLS/
		mkdir /RepoMaker/apps/RenamePLS/Library
		mkdir /RepoMaker/apps/RenamePLS/Library/Ringtones
		mkdir /RepoMaker/apps/RenamePLS/DEBIAN
		newcontrolfile
		echo "Createt new Directory in /RepoMaker/apps"
		else
			echo "There is already a Unnamed Directory..."
		fi
	fi
fi

if [ "$1" == "-makesetup" ] || [ "$1" == "--make-repogui" ]; then
	echo "creating setup Bundle for users..."
	mkdir -p /RepoMaker/apps/$PKGID.sourcegui/DEBIAN
	mkdir -p /RepoMaker/apps/$PKGID.sourcegui/usr/share/keyrings/
	echo "generating control file..."
	echo "Package: $PKGID.sourcegui
Version: 1.0
Section: Repo Setup
Maintainer: $MAINTAINER
Architecture: iphoneos-arm
Description: Setup for RepoIcons and gpg Key
Depiction: $DEPICURL?package=
Name: RepoSetup
Author: $MAINTAINER
Sponsor: $SPONSOR
Essential: yes
Priority: required
" > /RepoMaker/apps/$PKGID.sourcegui/DEBIAN/control

echo "exporting pub key..."
gpg --export --armor $KEYUSER >/RepoMaker/apps/$PKGID.sourcegui/usr/share/keyrings/$KEYUSER-keyring.gpg

echo "#!/bin/sh
if [[ "\$1" == install || "\$1" == upgrade ]]; then
    /usr/bin/apt-key add /usr/share/keyrings/$KEYUSER-keyring.gpg
fi
" > /RepoMaker/apps/$PKGID.sourcegui/DEBIAN/extrainst_

echo "#!/bin/sh
if [[ "\$1" == remove ]]; then
    /usr/bin/apt-key del $KEYUSER
fi
" > /RepoMaker/apps/$PKGID.sourcegui/DEBIAN/prerm
chmod -R 755 /RepoMaker/apps/$PKGID.sourcegui/DEBIAN/
echo "DONE"
echo ""
echo "please add your RepoIcons if you have some..."
fi
